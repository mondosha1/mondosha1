name: Nx Distributed Tasks

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      rebuild_all:
        description: 'Rebuild all? (Yes/No)'
        required: true
        default: 'No'

concurrency:
  group: nx-distributed-tasks-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

env:
  BUILD_ARTIFACTS: build-artifacts
  BUILD_LIBRARIES: ${{ secrets.BUILD_LIBRARIES || 'false' }}
  PUBLISH_LIBRARIES: ${{ secrets.PUBLISH_LIBRARIES || 'false' }}
  CACHED_PATHS: |
    node_modules
    cache/Cypress
  CYPRESS_CACHE: cache-cypress
  CYPRESS_CACHE_FOLDER: cache/Cypress
  DEPENDENCIES_CACHE: ${{ secrets.DEPENDENCIES_CACHE || 'cache-node-modules' }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'ghcr.io' }}
  NPM_REGISTRY: ${{ secrets.NPM_REGISTRY || 'registry.npmjs.org' }}
  E2E_ARTIFACTS: e2e-artifacts
  TEST_ARTIFACTS: test-artifacts
  NG_DEPLOY_AWS_ACCESS_KEY_ID: ${{ secrets.S3_PROXY_AWS_ACCESS_KEY_ID }}
  NG_DEPLOY_AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_PROXY_AWS_SECRET_ACCESS_KEY }}

jobs:
  vars:
    runs-on: ubuntu-latest
    outputs:
      GITHUB_HEAD_REF: ${{ steps.GITHUB_HEAD_REF.outputs.value }}
      GITHUB_HEAD_SLUG: ${{ steps.GITHUB_HEAD_SLUG.outputs.value }}
      GITHUB_BASE_REF: ${{ steps.GITHUB_BASE_REF.outputs.value }}
      GITHUB_BASE_SLUG: ${{ steps.GITHUB_BASE_SLUG.outputs.value }}
    steps:
      - id: GITHUB_HEAD_REF
        run: echo "::set-output name=value::$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}})"
      - id: GITHUB_HEAD_SLUG
        run: echo "::set-output name=value::$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} | sed -e 's/[^a-zA-Z0-9_.-]/_/g' | awk '{print tolower($0)}')"
      - uses: nrwl/last-successful-commit-action@v1
        id: last_successful_commit
        with:
          branch: ${{ steps.GITHUB_HEAD_REF.outputs.value }}
          workflow_id: 'nx-distributed-tasks.yml'
          github_token: ${{ secrets.NX_GITHUB_SECRETS }}
      - id: GITHUB_BASE_REF
        run: |
          REBUILD_ALL=$(echo "${{ github.event.inputs.rebuild_all }}" | awk '{print tolower($0)}')
          REBUILD_ALL_BASE_REF=$(if [[ "$REBUILD_ALL" == "yes" ]] || [[ "$REBUILD_ALL" == "y" ]]; then echo ${GITHUB_REF#refs/heads/}; fi)
          LAST_SUCCESSFUL_COMMIT_COMMIT_HASH="${{ steps.last_successful_commit.outputs.commit_hash }}"
          echo "::set-output name=value::$(echo ${REBUILD_ALL_BASE_REF:-${LAST_SUCCESSFUL_COMMIT_COMMIT_HASH:-${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}}})"
      - id: GITHUB_BASE_SLUG
        run: echo "::set-output name=value::$(echo ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}} | sed -e 's/[^a-zA-Z0-9_.-]/_/g' | awk '{print tolower($0)}')"
      - name: Display vars
        run: |
          echo "GITHUB_HEAD_REF: ${{ steps.GITHUB_HEAD_REF.outputs.value }}"
          echo "GITHUB_HEAD_SLUG: ${{ steps.GITHUB_HEAD_SLUG.outputs.value }}"
          echo "GITHUB_BASE_REF: ${{ steps.GITHUB_BASE_REF.outputs.value }}"
          echo "GITHUB_BASE_SLUG: ${{ steps.GITHUB_BASE_SLUG.outputs.value }}"

  install-deps:
    runs-on: ubuntu-latest
    needs: vars
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/setup-node@v1
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 12.16.3
      - name: npm set token
        if: steps.cache.outputs.cache-hit != 'true'
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: npm install
        if: steps.cache.outputs.cache-hit != 'true'
        run: rm -rf node_modules ; npm install --from-lock-file --prefer-offline --no-audit --unsafe-perm

  precheck:
    runs-on: ubuntu-latest
    needs: [vars, install-deps]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - name: Exit job if deps not cached yet
        if: steps.cache.outputs.cache-hit != 'true'
        run: exit 1
      - name: Compute Nx arguments
        run: |
          BASE_REF_WITH_PREFIX=$(if [[ ! "${{ needs.vars.outputs.GITHUB_BASE_REF }}" =~ ^[0-9a-f]{7,40}$ ]]; then echo "origin/"; fi)${{ needs.vars.outputs.GITHUB_BASE_REF }}
          echo "NX_ARGUMENTS=--base=$BASE_REF_WITH_PREFIX" >> $GITHUB_ENV
        if: needs.vars.outputs.GITHUB_HEAD_REF != needs.vars.outputs.GITHUB_BASE_REF
      - name: nx format:check
        run: node --max-old-space-size=8000 ./node_modules/@nrwl/cli/bin/nx.js format:check $NX_ARGUMENTS
      - name: nx workspace-lint
        run: node --max-old-space-size=8000 ./node_modules/@nrwl/cli/bin/nx.js workspace-lint $NX_ARGUMENTS
      - name: nx copybara:check
        run: node --max-old-space-size=8000 ./node_modules/@nrwl/cli/bin/nx.js workspace-generator copybara --dry-run --no-interactive | (! grep -E 'CREATE|UPDATE|DELETE')

  calculate-targets:
    runs-on: ubuntu-latest
    needs: [vars, install-deps]
    env:
      distributedTargets: lint,test
      distributedChunkSize: 17,8
      buildTasksChunkSize: 1
      e2eTasksChunkSize: 1
      dockerTasksChunkSize: 5
      publishTasksChunkSize: 5
      itTasksChunkSize: 1
      deployTasksChunkSize: 5
    outputs:
      DISTRIBUTED_TARGETS: ${{ steps.DISTRIBUTED_TARGETS.outputs.value }}
      HAS_DISTRIBUTED_TARGETS: ${{ join(fromJson(steps.DISTRIBUTED_TARGETS.outputs.value).tasks) != '' }}
      BUILD_TASKS: ${{ steps.BUILD_TASKS.outputs.value }}
      HAS_BUILD_TASKS: ${{ join(fromJson(steps.BUILD_TASKS.outputs.value).tasks) != '' }}
      E2E_TASKS: ${{ steps.E2E_TASKS.outputs.value }}
      HAS_E2E_TASKS: ${{ join(fromJson(steps.E2E_TASKS.outputs.value).tasks) != '' }}
      DOCKER_BUILD_TASKS: ${{ steps.DOCKER_BUILD_TASKS.outputs.value }}
      HAS_DOCKER_BUILD_TASKS: ${{ join(fromJson(steps.DOCKER_BUILD_TASKS.outputs.value).tasks) != '' }}
      IT_TASKS: ${{ steps.IT_TASKS.outputs.value }}
      HAS_IT_TASKS: ${{ join(fromJson(steps.IT_TASKS.outputs.value).tasks) != '' }}
      DOCKER_TAG_TASKS: ${{ steps.DOCKER_TAG_TASKS.outputs.value }}
      HAS_DOCKER_TAG_TASKS: ${{ join(fromJson(steps.DOCKER_TAG_TASKS.outputs.value).tasks) != '' }}
      DEPLOY_TASKS: ${{ steps.DEPLOY_TASKS.outputs.value }}
      HAS_DEPLOY_TASKS: ${{ join(fromJson(steps.DEPLOY_TASKS.outputs.value).tasks) != '' }}
      PUBLISH_TASKS: ${{ steps.PUBLISH_TASKS.outputs.value }}
      HAS_PUBLISH_TASKS: ${{ (env.PUBLISH_LIBRARIES == 'true') && (join(fromJson(steps.PUBLISH_TASKS.outputs.value).tasks) != '') }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - name: Exit job if deps not cached yet
        if: steps.cache.outputs.cache-hit != 'true'
        run: exit 1
      - name: Calculate distributed targets
        id: DISTRIBUTED_TARGETS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js ${{ env.distributedTargets }} ${{ env.distributedChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate build targets
        id: BUILD_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js build ${{ env.buildTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }} ${{ env.BUILD_LIBRARIES == 'true' && '--build-libraries' || '' }})"
      - name: Calculate e2e targets
        id: E2E_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js e2e ${{ env.e2eTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate docker build tasks
        id: DOCKER_BUILD_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js docker-build ${{ env.dockerTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate IT tasks
        id: IT_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js it ${{ env.itTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate docker tag tasks
        id: DOCKER_TAG_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js docker-tag ${{ env.dockerTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate publish tasks
        id: PUBLISH_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js publish ${{ env.publishTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate deploy tasks
        id: DEPLOY_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js deploy ${{ env.deployTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Display calculated results
        run: |
          echo "--- DISTRIBUTED_TARGETS ---"
          echo "${{ steps.DISTRIBUTED_TARGETS.outputs.value }}"
          echo ""
          echo ""
          echo "--- BUILD_TASKS ---"
          echo "${{ steps.BUILD_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- E2E_TASKS ---"
          echo "${{ steps.E2E_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- DOCKER_BUILD_TASKS ---"
          echo "${{ steps.DOCKER_BUILD_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- IT_TASKS ---"
          echo "${{ steps.IT_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- DOCKER_TAG_TASKS ---"
          echo "${{ steps.DOCKER_TAG_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- PUBLISH_TASKS ---"
          echo "${{ steps.PUBLISH_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- DEPLOY_TASKS ---"
          echo "${{ steps.DEPLOY_TASKS.outputs.value }}"

  distributed-task:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets]
    timeout-minutes: 60
    if: needs.calculate-targets.outputs.HAS_DISTRIBUTED_TARGETS == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DISTRIBUTED_TARGETS) }}
    steps:
      - id: TASK_HASH
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | md5sum | awk '{print $1}')"
      - id: TASK_PREFIX
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | sed 's/,.*//' | sed 's/.*:/--/')"
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}
      - name: Upload test artifacts
        if: startsWith(matrix.tasks, 'test:')
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ${{ env.TEST_ARTIFACTS }}-${{steps.TASK_PREFIX.outputs.value}}-${{ steps.TASK_HASH.outputs.value }}
          path: |
            report
            coverage

  build:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets]
    timeout-minutes: 60
    if: needs.calculate-targets.outputs.HAS_BUILD_TASKS == 'true'
    strategy:
      matrix: ${{ fromJson(needs.calculate-targets.outputs.BUILD_TASKS) }}
      fail-fast: false
    steps:
      - id: TASK_HASH
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | md5sum | awk '{print $1}')"
      - id: TASK_PREFIX
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | sed 's/,.*//' | sed 's/.*:/--/')"
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --configuration=production

  e2e:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets]
    timeout-minutes: 60
    if: needs.calculate-targets.outputs.HAS_E2E_TASKS == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.E2E_TASKS) }}
    steps:
      - id: TASK_HASH
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | md5sum | awk '{print $1}')"
      - id: TASK_PREFIX
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | sed 's/,.*//' | sed 's/.*:/--/')"
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - name: npm set token
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: Cache Cypress
        uses: actions/cache@v2
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: ${{ env.CYPRESS_CACHE }}
      - name: nx ${{ matrix.tasks }}
        uses: cypress-io/github-action@v2
        with:
          install: false
          command: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --configuration=production
      - name: Upload e2e artifacts
        if: always()
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ${{ env.E2E_ARTIFACTS }}-${{steps.TASK_PREFIX.outputs.value}}-${{ steps.TASK_HASH.outputs.value }}
          path: dist

  publish:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, build]
    if: needs.calculate-targets.outputs.HAS_PUBLISH_TASKS == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.PUBLISH_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - name: npm set token for publishing projects
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: nx publish
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [vars, precheck, calculate-targets, build]
    if: needs.calculate-targets.outputs.HAS_DOCKER_BUILD_TASKS == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DOCKER_BUILD_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - run: docker login -u ${{ secrets.DOCKER_USER }} -p "${{ secrets.DOCKER_PASSWORD }}" ${{ env.DOCKER_REGISTRY }}
      - name: npm set token for installing dedicated Node apps dependencies
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --args="--githash=${{ github.sha }}"

  it:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, docker-build]
    if: needs.calculate-targets.outputs.HAS_IT_TASKS == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.IT_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - run: docker login -u ${{ secrets.DOCKER_USER }} -p "${{ secrets.DOCKER_PASSWORD }}" ${{ env.DOCKER_REGISTRY }}
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --args="--githash=${{ github.sha }} --branch=${{ needs.vars.outputs.GITHUB_HEAD_SLUG }}"

  docker-tag:
    if: (needs.calculate-targets.outputs.HAS_IT_TASKS == 'false' || needs.it.result == 'success') && (needs.calculate-targets.outputs.HAS_E2E_TASKS == 'false' || needs.e2e.result == 'success') && needs.calculate-targets.outputs.HAS_DOCKER_TAG_TASKS == 'true' && always()
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, docker-build, e2e, it]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DOCKER_TAG_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - run: docker login -u ${{ secrets.DOCKER_USER }} -p "${{ secrets.DOCKER_PASSWORD }}" ${{ env.DOCKER_REGISTRY }}
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --args="--githash=${{ github.sha }} --tag=${{ needs.vars.outputs.GITHUB_HEAD_SLUG }}"

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && (needs.calculate-targets.outputs.HAS_IT_TASKS == 'false' || needs.it.result == 'success') && (needs.calculate-targets.outputs.HAS_E2E_TASKS == 'false' || needs.e2e.result == 'success') && needs.calculate-targets.outputs.HAS_DEPLOY_TASKS == 'true' && always()
    needs: [vars, calculate-targets, it, e2e]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DEPLOY_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_PATHS }}
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ hashFiles('package-lock.json') }}
      - name: nx deploy
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}

  success:
    runs-on: ubuntu-latest
    if: (needs.calculate-targets.outputs.HAS_DOCKER_TAG_TASKS == 'false' || needs.docker-tag.result == 'success') && (needs.calculate-targets.outputs.HAS_PUBLISH_TASKS == 'false' || needs.publish.result == 'success') && (github.ref != 'refs/heads/master' || needs.calculate-targets.outputs.HAS_DEPLOY_TASKS == 'false' || needs.deploy.result == 'success') && always()
    needs: [vars, docker-tag, publish, deploy]
    steps:
      - run: echo "Workflow succeeded"
