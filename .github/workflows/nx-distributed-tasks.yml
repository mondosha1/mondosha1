name: Nx Distributed Tasks

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      rebuild_all:
        description: 'Rebuild all? (Yes/No)'
        required: true
        default: 'No'

concurrency:
  group: nx-distributed-tasks-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

env:
  BUILD_ARTIFACTS: build-artifacts
  CYPRESS_CACHE: cache-cypress
  CYPRESS_CACHE_FOLDER: cache/Cypress
  CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE: ${{ secrets.CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE || '' }}
  DEPENDENCIES_CACHE: ${{ secrets.DEPENDENCIES_CACHE || 'cache-node-modules' }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'ghcr.io' }}
  NPM_REGISTRY: ${{ secrets.NPM_REGISTRY || 'registry.npmjs.org' }}
  E2E_ARTIFACTS: e2e-artifacts
  TEST_ARTIFACTS: test-artifacts
  NG_DEPLOY_AWS_ACCESS_KEY_ID: ${{ secrets.S3_PROXY_AWS_ACCESS_KEY_ID }}
  NG_DEPLOY_AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_PROXY_AWS_SECRET_ACCESS_KEY }}
  ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  ARGOCD_URL: ${{ secrets.ARGOCD_URL }}
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG_FILE }}

jobs:
  vars:
    runs-on: ubuntu-latest
    outputs:
      AUTOFORMAT_ALL_BRANCHES: ${{ steps.AUTOFORMAT_ALL_BRANCHES.outputs.value }}
      BUILD_LIBRARIES: ${{ steps.BUILD_LIBRARIES.outputs.value }}
      PUBLISH_LIBRARIES: ${{ steps.PUBLISH_LIBRARIES.outputs.value }}
      GITHUB_HEAD_REF: ${{ steps.GITHUB_HEAD_REF.outputs.value }}
      GITHUB_HEAD_SLUG: ${{ steps.GITHUB_HEAD_SLUG.outputs.value }}
      GITHUB_BASE_REF: ${{ steps.GITHUB_BASE_REF.outputs.value }}
      GITHUB_BASE_SLUG: ${{ steps.GITHUB_BASE_SLUG.outputs.value }}
      PRODUCTION_TIMESTAMP: ${{ steps.PRODUCTION_TIMESTAMP.outputs.value }}
    steps:
      - id: AUTOFORMAT_ALL_BRANCHES
        run: echo "::set-output name=value::$(echo ${{ secrets.AUTOFORMAT_ALL_BRANCHES }} || '')"
      - id: BUILD_LIBRARIES
        run: echo "::set-output name=value::$(echo ${{ secrets.BUILD_LIBRARIES }} || '')"
      - id: PUBLISH_LIBRARIES
        run: echo "::set-output name=value::$(echo ${{ secrets.PUBLISH_LIBRARIES }} || '')"
      - id: GITHUB_HEAD_REF
        run: echo "::set-output name=value::$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}})"
      - id: GITHUB_HEAD_SLUG
        run: echo "::set-output name=value::$(echo ${{ steps.GITHUB_HEAD_REF.outputs.value }} | sed -e 's/[^a-zA-Z0-9_.-]/_/g' | awk '{print tolower($0)}')"
      - uses: nrwl/last-successful-commit-action@v1
        id: last_successful_commit
        with:
          branch: ${{ steps.GITHUB_HEAD_REF.outputs.value }}
          workflow_id: 'nx-distributed-tasks.yml'
          github_token: ${{ secrets.NX_GITHUB_SECRETS }}
      - id: GITHUB_BASE_REF
        run: |
          REBUILD_ALL=$(echo "${{ github.event.inputs.rebuild_all }}" | awk '{print tolower($0)}')
          REBUILD_ALL_BASE_REF=$(if [[ "$REBUILD_ALL" == "yes" ]] || [[ "$REBUILD_ALL" == "y" ]]; then echo ${GITHUB_REF#refs/heads/}; fi)
          LAST_SUCCESSFUL_COMMIT_COMMIT_HASH="${{ steps.last_successful_commit.outputs.commit_hash }}"
          echo "::set-output name=value::$(echo ${REBUILD_ALL_BASE_REF:-${LAST_SUCCESSFUL_COMMIT_COMMIT_HASH:-${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}}})"
      - id: GITHUB_BASE_SLUG
        run: echo "::set-output name=value::$(echo ${{ steps.GITHUB_BASE_REF.outputs.value }} | sed -e 's/[^a-zA-Z0-9_.-]/_/g' | awk '{print tolower($0)}')"
      - id: PRODUCTION_TIMESTAMP
        run: echo "::set-output name=value::$(date +'%Y%m%d_%H%m%S')"
      - name: Display vars
        run: |
          echo "AUTOFORMAT_ALL_BRANCHES: ${{ steps.AUTOFORMAT_ALL_BRANCHES.outputs.value }}"
          echo "BUILD_LIBRARIES: ${{ steps.BUILD_LIBRARIES.outputs.value }}"
          echo "PUBLISH_LIBRARIES: ${{ steps.PUBLISH_LIBRARIES.outputs.value }}"
          echo "GITHUB_HEAD_REF: ${{ steps.GITHUB_HEAD_REF.outputs.value }}"
          echo "GITHUB_HEAD_SLUG: ${{ steps.GITHUB_HEAD_SLUG.outputs.value }}"
          echo "GITHUB_BASE_REF: ${{ steps.GITHUB_BASE_REF.outputs.value }}"
          echo "GITHUB_BASE_SLUG: ${{ steps.GITHUB_BASE_SLUG.outputs.value }}"
          echo "PRODUCTION_TIMESTAMP: ${{ steps.PRODUCTION_TIMESTAMP.outputs.value }}"

  install-deps:
    runs-on: ubuntu-latest
    needs: vars
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v2
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: ${{ env.CYPRESS_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/setup-node@v1
        if: steps.cache-node-modules.outputs.cache-hit != 'true' || steps.cache-cypress.outputs.cache-hit != 'true'
        with:
          node-version: 16.11.1
      - name: npm set token
        if: steps.cache-node-modules.outputs.cache-hit != 'true' || steps.cache-cypress.outputs.cache-hit != 'true'
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: npm install
        if: steps.cache-node-modules.outputs.cache-hit != 'true' || steps.cache-cypress.outputs.cache-hit != 'true'
        run: rm -rf node_modules ; npm install --from-lock-file --prefer-offline --no-audit --unsafe-perm

  precheck:
    runs-on: ubuntu-latest
    needs: [vars, install-deps]
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: Exit job if deps not cached yet
        if: steps.cache.outputs.cache-hit != 'true'
        run: exit 1
      - name: Compute Nx arguments
        if: needs.vars.outputs.GITHUB_HEAD_REF != needs.vars.outputs.GITHUB_BASE_REF
        run: |
          BASE_REF_WITH_PREFIX=$(if [[ ! "${{ needs.vars.outputs.GITHUB_BASE_REF }}" =~ ^[0-9a-f]{7,40}$ ]]; then echo "origin/"; fi)${{ needs.vars.outputs.GITHUB_BASE_REF }}
          HEAD_REF_WITH_PREFIX=$(if [[ ! "${{ needs.vars.outputs.GITHUB_HEAD_REF }}" =~ ^[0-9a-f]{7,40}$ ]]; then echo "origin/"; fi)${{ needs.vars.outputs.GITHUB_HEAD_REF }}
          echo "NX_ARGUMENTS=--head=$HEAD_REF_WITH_PREFIX --base=$BASE_REF_WITH_PREFIX" >> $GITHUB_ENV
      - name: Autoformat
        id: autoformat
        if: ${{ contains(github.event.pull_request.labels.*.name, 'autoformat') || (needs.vars.outputs.AUTOFORMAT_ALL_BRANCHES != '') }}
        run: |
          yarn format:write $NX_ARGUMENTS
          yarn affected:lint --fix $NX_ARGUMENTS
          echo "::set-output name=value::$(./tools/scripts/autofixup-all.sh on ${{ needs.vars.outputs.GITHUB_BASE_REF }} --no-verify >/dev/null 2>&1 && echo 'Autoformat succeeded' || echo 'Autoformat failed or nothing to format')"
      - run: echo "${{ steps.autoformat.outputs.value }}"
      - name: Push formatted files
        uses: ad-m/github-push-action@master
        if: ${{ (contains(github.event.pull_request.labels.*.name, 'autoformat') || (needs.vars.outputs.AUTOFORMAT_ALL_BRANCHES != '')) && contains(steps.autoformat.outputs.value, 'Autoformat succeeded') }}
        with:
          github_token: ${{ secrets.GH_WORKFLOW_TOKEN }}
          branch: ${{ needs.vars.outputs.GITHUB_HEAD_REF }}
          force: true
      - name: nx format:check
        run: node --max-old-space-size=8000 ./node_modules/@nrwl/cli/bin/nx.js format:check $NX_ARGUMENTS
      - name: nx workspace-lint
        run: node --max-old-space-size=8000 ./node_modules/@nrwl/cli/bin/nx.js workspace-lint $NX_ARGUMENTS
      - name: nx copybara:check
        run: node --max-old-space-size=8000 ./node_modules/@nrwl/cli/bin/nx.js workspace-generator copybara --dry-run --no-interactive | (! grep -E 'CREATE|UPDATE|DELETE')

  calculate-targets:
    runs-on: ubuntu-latest
    needs: [vars, precheck, install-deps]
    env:
      distributedTargets: lint,test
      distributedChunkSize: 17,8
      buildTasksChunkSize: 1
      dockerBuildTasksChunkSize: 1
      dockerTagTasksChunkSize: 5
      e2eTasksChunkSize: 1
      e2eDockerTasksChunkSize: 1
      publishTasksChunkSize: 5
      itTasksChunkSize: 1
      deployTasksChunkSize: 5
      deployArgocdTasksChunkSize: 1
    outputs:
      DISTRIBUTED_TARGETS: ${{ steps.DISTRIBUTED_TARGETS.outputs.value }}
      BUILD_TASKS: ${{ steps.BUILD_TASKS.outputs.value }}
      E2E_TASKS: ${{ steps.E2E_TASKS.outputs.value }}
      E2E_DOCKER_TASKS: ${{ steps.E2E_DOCKER_TASKS.outputs.value }}
      DOCKER_BUILD_TASKS: ${{ steps.DOCKER_BUILD_TASKS.outputs.value }}
      IT_TASKS: ${{ steps.IT_TASKS.outputs.value }}
      DOCKER_TAG_TASKS: ${{ steps.DOCKER_TAG_TASKS.outputs.value }}
      DEPLOY_TASKS: ${{ steps.DEPLOY_TASKS.outputs.value }}
      DEPLOY_ARGOCD_TASKS: ${{ steps.DEPLOY_ARGOCD_TASKS.outputs.value }}
      PUBLISH_TASKS: ${{ steps.PUBLISH_TASKS.outputs.value }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: Exit job if deps not cached yet
        if: steps.cache.outputs.cache-hit != 'true'
        run: exit 1
      - name: Calculate distributed targets
        id: DISTRIBUTED_TARGETS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js ${{ env.distributedTargets }} ${{ env.distributedChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate build targets
        id: BUILD_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js build ${{ env.buildTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }} ${{ needs.vars.outputs.BUILD_LIBRARIES != '' && '--build-libraries' || '' }})"
      - name: Calculate e2e targets
        id: E2E_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js e2e ${{ env.e2eTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate e2e docker targets
        id: E2E_DOCKER_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js e2e-docker ${{ env.e2eDockerTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate docker build tasks
        id: DOCKER_BUILD_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js docker-build ${{ env.dockerBuildTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate IT tasks
        id: IT_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js it ${{ env.itTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate docker tag tasks
        id: DOCKER_TAG_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js docker-tag ${{ env.dockerTagTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate publish tasks
        id: PUBLISH_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js publish ${{ env.publishTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate deploy tasks
        id: DEPLOY_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js deploy ${{ env.deployTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Calculate deploy tasks
        id: DEPLOY_ARGOCD_TASKS
        run: echo "::set-output name=value::$(node ./tools/scripts/calculate-targets.js deploy-argocd ${{ env.deployArgocdTasksChunkSize }} ${{ needs.vars.outputs.GITHUB_HEAD_REF }} ${{ needs.vars.outputs.GITHUB_BASE_REF }})"
      - name: Display calculated results
        run: |
          echo "--- DISTRIBUTED_TARGETS ---"
          echo "${{ steps.DISTRIBUTED_TARGETS.outputs.value }}"
          echo ""
          echo ""
          echo "--- BUILD_TASKS ---"
          echo "${{ steps.BUILD_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- E2E_TASKS ---"
          echo "${{ steps.E2E_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- DOCKER_BUILD_TASKS ---"
          echo "${{ steps.DOCKER_BUILD_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- IT_TASKS ---"
          echo "${{ steps.IT_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- E2E_DOCKER_TASKS ---"
          echo "${{ steps.E2E_DOCKER_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- DOCKER_TAG_TASKS ---"
          echo "${{ steps.DOCKER_TAG_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- PUBLISH_TASKS ---"
          echo "${{ steps.PUBLISH_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- DEPLOY_ARGOCD_TASKS ---"
          echo "${{ steps.DEPLOY_ARGOCD_TASKS.outputs.value }}"
          echo ""
          echo ""
          echo "--- DEPLOY_TASKS ---"
          echo "${{ steps.DEPLOY_TASKS.outputs.value }}"

  distributed-task:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets]
    timeout-minutes: 60
    if: join(fromJson(needs.calculate-targets.outputs.DISTRIBUTED_TARGETS).tasks) != ''
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DISTRIBUTED_TARGETS) }}
    steps:
      - id: TASK_HASH
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | md5sum | awk '{print $1}')"
      - id: TASK_PREFIX
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | sed 's/,.*//' | sed 's/.*:/--/')"
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}
      - name: Upload test artifacts
        if: startsWith(matrix.tasks, 'test:')
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ${{ env.TEST_ARTIFACTS }}-${{steps.TASK_PREFIX.outputs.value}}-${{ steps.TASK_HASH.outputs.value }}
          path: |
            report
            coverage

  build:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets]
    timeout-minutes: 60
    if: join(fromJson(needs.calculate-targets.outputs.BUILD_TASKS).tasks) != ''
    strategy:
      matrix: ${{ fromJson(needs.calculate-targets.outputs.BUILD_TASKS) }}
      fail-fast: false
    steps:
      - id: TASK_HASH
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | md5sum | awk '{print $1}')"
      - id: TASK_PREFIX
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | sed 's/,.*//' | sed 's/.*:/--/')"
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --configuration=production

  e2e:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets]
    timeout-minutes: 60
    if: join(fromJson(needs.calculate-targets.outputs.E2E_TASKS).tasks) != ''
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.E2E_TASKS) }}
    steps:
      - id: TASK_HASH
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | md5sum | awk '{print $1}')"
      - id: TASK_PREFIX
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | sed 's/,.*//' | sed 's/.*:/--/')"
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: npm set token
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: Cache Cypress
        uses: actions/cache@v2
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: ${{ env.CYPRESS_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: nx ${{ matrix.tasks }}
        uses: cypress-io/github-action@v2
        env:
          DEBUG: ${{ env.CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE }}
          CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE: ${{ env.CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE }}
        with:
          install: false
          command: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --configuration=production
      - name: Upload e2e artifacts
        if: always()
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ${{ env.E2E_ARTIFACTS }}-${{steps.TASK_PREFIX.outputs.value}}-${{ steps.TASK_HASH.outputs.value }}
          path: dist

  publish:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, build]
    if: (needs.vars.outputs.PUBLISH_LIBRARIES != '') && (join(fromJson(needs.calculate-targets.outputs.PUBLISH_TASKS).tasks) != '')
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.PUBLISH_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: npm set token for publishing projects
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: nx publish
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, build]
    if: join(fromJson(needs.calculate-targets.outputs.DOCKER_BUILD_TASKS).tasks) != ''
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DOCKER_BUILD_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - run: docker login -u ${{ secrets.DOCKER_USER }} -p "${{ secrets.DOCKER_PASSWORD }}" ${{ env.DOCKER_REGISTRY }}
      - name: npm set token for installing dedicated Node apps dependencies
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --args="--githash=${{ github.sha }}"

  it:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, docker-build]
    if: join(fromJson(needs.calculate-targets.outputs.IT_TASKS).tasks) != '' && (join(fromJson(needs.calculate-targets.outputs.DOCKER_BUILD_TASKS).tasks) == '' || needs.docker-build.result == 'success')
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.IT_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - run: docker login -u ${{ secrets.DOCKER_USER }} -p "${{ secrets.DOCKER_PASSWORD }}" ${{ env.DOCKER_REGISTRY }}
      - name: nx ${{ matrix.tasks }}
        env:
          GITHASH: ${{ github.sha }}
          BRANCH: ${{ needs.vars.outputs.GITHUB_HEAD_SLUG }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}

  e2e-docker:
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, docker-build]
    if: join(fromJson(needs.calculate-targets.outputs.E2E_DOCKER_TASKS).tasks) != '' && (join(fromJson(needs.calculate-targets.outputs.DOCKER_BUILD_TASKS).tasks) == '' || needs.docker-build.result == 'success')
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.E2E_DOCKER_TASKS) }}
    steps:
      - id: TASK_HASH
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | md5sum | awk '{print $1}')"
      - id: TASK_PREFIX
        run: echo "::set-output name=value::$(echo ${{ matrix.tasks }} | sed 's/,.*//' | sed 's/.*:/--/')"
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: Cache Cypress
        uses: actions/cache@v2
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: ${{ env.CYPRESS_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - run: docker login -u ${{ secrets.DOCKER_USER }} -p "${{ secrets.DOCKER_PASSWORD }}" ${{ env.DOCKER_REGISTRY }}
      - name: nx ${{ matrix.tasks }}
        uses: cypress-io/github-action@v2
        env:
          DEBUG: ${{ env.CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE }}
          CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE: ${{ env.CYPRESS_PLUGIN__VERBOSE_LOGS__DEBUG_MODE }}
          GITHASH: ${{ github.sha }}
          BRANCH: ${{ needs.vars.outputs.GITHUB_HEAD_SLUG }}
        with:
          install: false
          command: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}
      - name: Upload e2e artifacts
        if: always()
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ${{ env.E2E_ARTIFACTS }}-${{steps.TASK_PREFIX.outputs.value}}-${{ steps.TASK_HASH.outputs.value }}
          path: dist

  docker-tag:
    if: join(fromJson(needs.calculate-targets.outputs.DOCKER_TAG_TASKS).tasks) != '' && (join(fromJson(needs.calculate-targets.outputs.IT_TASKS).tasks) == '' || needs.it.result == 'success') && (join(fromJson(needs.calculate-targets.outputs.E2E_DOCKER_TASKS).tasks) == '' || needs.e2e-docker.result == 'success') && (join(fromJson(needs.calculate-targets.outputs.E2E_TASKS).tasks) == '' || needs.e2e.result == 'success') && always()
    runs-on: ubuntu-latest
    needs: [vars, calculate-targets, docker-build, e2e, e2e-docker, it]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DOCKER_TAG_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - run: docker login -u ${{ secrets.DOCKER_USER }} -p "${{ secrets.DOCKER_PASSWORD }}" ${{ env.DOCKER_REGISTRY }}
      - name: nx ${{ matrix.tasks }}
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }} --args="--githash=${{ github.sha }} --tag=${{ needs.vars.outputs.GITHUB_HEAD_SLUG }}"

  deploy-argocd:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && join(fromJson(needs.calculate-targets.outputs.DEPLOY_ARGOCD_TASKS).tasks) != '' && (join(fromJson(needs.calculate-targets.outputs.IT_TASKS).tasks) == '' || needs.it.result == 'success') && (join(fromJson(needs.calculate-targets.outputs.E2E_TASKS).tasks) == '' || needs.e2e.result == 'success') && (join(fromJson(needs.calculate-targets.outputs.E2E_DOCKER_TASKS).tasks) == '' || needs.e2e-docker.result == 'success') && always()
    needs: [vars, calculate-targets, it, e2e, e2e-docker]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DEPLOY_ARGOCD_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: nx deploy-argocd
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && join(fromJson(needs.calculate-targets.outputs.DEPLOY_TASKS).tasks) != '' && (join(fromJson(needs.calculate-targets.outputs.IT_TASKS).tasks) == '' || needs.it.result == 'success') && (join(fromJson(needs.calculate-targets.outputs.E2E_TASKS).tasks) == '' || needs.e2e.result == 'success') && (join(fromJson(needs.calculate-targets.outputs.E2E_DOCKER_TASKS).tasks) == '' || needs.e2e-docker.result == 'success') && (join(fromJson(needs.calculate-targets.outputs.DEPLOY_ARGOCD_TASKS).tasks) == '' || needs.deploy-argocd.result == 'success') && always()
    needs: [vars, calculate-targets, it, e2e, e2e-docker, deploy-argocd]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-targets.outputs.DEPLOY_TASKS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.DEPENDENCIES_CACHE }}-${{ secrets.CACHE_GITHUB_ACTION_BUSTER_KEY }}-${{ hashFiles('package-lock.json') }}
      - name: nx deploy
        run: node ./tools/scripts/run-tasks.js ${{ matrix.tasks }}

  success:
    runs-on: ubuntu-latest
    if: (join(fromJson(needs.calculate-targets.outputs.DOCKER_TAG_TASKS).tasks) == '' || needs.docker-tag.result == 'success') && ((needs.vars.outputs.PUBLISH_LIBRARIES == '') || (join(fromJson(needs.calculate-targets.outputs.PUBLISH_TASKS).tasks) == '') || needs.publish.result == 'success') && (github.ref != 'refs/heads/master' || join(fromJson(needs.calculate-targets.outputs.DEPLOY_TASKS).tasks) == '' || needs.deploy.result == 'success') && always()
    needs: [vars, docker-tag, publish, deploy]
    steps:
      - run: echo "Workflow succeeded"
